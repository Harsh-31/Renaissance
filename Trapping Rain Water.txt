# Leetcode-42: Trapping Rain Water

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6


Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9

Constraints:

    n == height.length
    1 <= n <= 2 * 104
    0 <= height[i] <= 105

//==========================================================================================================================

class Solution 
{
    //calculate Prefix max
    int[] Pmax;
    public void prefixMax(int[] height)
    {
        if(height.length == 0)
        {
            return;
        }
        Pmax = new int[height.length];
        Pmax[0] = height[0];
        for(int i = 1; i < height.length; i++)
        {
            Pmax[i] = Math.max(Pmax[i-1], height[i]);
        }  
    }
    
    //calculate Sufix max
    int[] Smax;
    public void suffixMax(int[] height)
    {
        if(height.length == 0 || height.length == 1)
        {
            return;
        }
        Smax = new int[height.length];
        Smax[height.length - 1] = height[height.length - 1];
        for(int i = height.length - 2; i >= 0; i--)
        {
           Smax[i] = Math.max(Smax[i + 1], height[i]);
        }
    }
    
    // Calculate smller between tallest in left and tallest in right
    public int trap(int[] height) 
    {
        if(height.length == 0 || height.length == 1)
        {
            return 0;
        }
        
        prefixMax(height);
        suffixMax(height);
        
        int amount = 0;
        for(int i = 1; i < height.length - 1; i++)
        {
            int h1 = Pmax[i];
            int h2 = Smax[i];
            int deciding_height = Math.min(h1, h2);
            if(deciding_height >= height[i])
            {
                amount += (deciding_height - height[i]);
            }
        }
        //return the total amount of water get trapped 
        return amount;   
    }
}

